import system;
import dump;


fun Fun_General()
{
	var map = {};
	map[5] = 3;
	map[6] = {};
	map[6][2] = 999;
	map[6][3] = 888;
	map["b2"] = 57;
	map["c3"] = "Hello Neo Script...";
	map["c4"] = "system";
	map["c4"] = null; // Remove

	for(var i in 0, 10, 1)
	{
		if (i % 2 == 0)
			map[i] = {};
		else
			map[i] = i;
	}
	map[0] = null; // Remove

	foreach(var a, b in map)
	{
		print(a ..":"..b);
		//sleep(200);
	}
	print("Map Size : " ..tosize(map));
}

fun fun_Sort()
{
	//var map = { "cc":{"aa" : "bb",100,101,102}, 1, 2, 3, 4, 5, "test", 65 };
	//var map = { 10, 11, 100:12,"test", 13 };
	var mapNumber = { 5, 3, 1, 4, 7, 2 };

	print("Before    : " .. dump.object(mapNumber));
	mapNumber.sort(fun(var a, var b) { return a < b; });
	print("Ascending : " .. dump.object(mapNumber));
	
	var mapPeople = {
		{"nationality" : "Ameraca", "name" : "James"},
		{"nationality" : "Korea",   "name" : "Alice"},
		{"nationality" : "Japan",   "name" : "Donard"},
	};

	print("Before : " .. dump.object(mapPeople));

	mapPeople.sort(fun(var a, var b){return a.name < b.name;});
	print("Name   : " .. dump.object(mapPeople));

	mapPeople.sort(fun(var a, var b){return a["nationality"] < b["nationality"];});
	print("Nation : " .. dump.object(mapPeople));
}

fun Fun_Performanc()
{
	var map = {};
	var tm = system.clock();
	
//	var count = 10000001; // release
	var count = 10001; // debug

	for (var i in 1, count, 1) // release
	{
		map[i] = i;
	}
	var sum = 0.0;
	print("Map Size : " .. map.len());
	//sleep(5000);
	print("Insert Time : " .. (system.clock() - tm));
	
	tm = system.clock();
	map.sort(fun(var a, var b) { return a > b; });
	print("Sort  Time : " .. (system.clock() - tm));
	//print("Sorted   : " .. dump.object(map));

	tm = system.clock();
	foreach(var a, b in map)
	{
		sum += b;
	}
	print("Map Size : " .. map.len());
	print("Sum " .. sum .. "");
	print("Foreach Time : " .. (system.clock() - tm));

	tm = system.clock();
	sum = 0.0;
	for (var i in 1, count, 1)
	{
		sum += i;
	}
	print("for Time : " .. (system.clock() - tm));
}

Fun_General();
fun_Sort();
Fun_Performanc();
