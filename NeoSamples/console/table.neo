
fun dumpTable(var o)
{
    if( type(o) == "table")
	{
        var s = "{ ";
        foreach(var k, v in o)
		{
            // key 가 숫자가 아닌 경우 "key" 
            if( type(k) != "int" )
                k = " "..k.. " " ;
            s = s .. "[".. k .."] = " .. dumpTable(v) .. ",";
        }
        return s .. "} ";
	}
    else
        return tostring(o);
}

fun Fun_General()
{
	var table = {};
	table[5] = 3;
	table[6] = {};
	table[6][2] = 999;
	table[6][3] = 888;
	table["b2"] = 57;
	table["c3"] = "Hello Neo Script...";
	table["c4"] = "system";
	table["c4"] = null; // Remove

	for (var i = 0; i < 10; i++)
	{
		if (i % 2 == 0)
			table[i] = {};
		else
			table[i] = i;
	}
	table[0] = null; // Remove

	foreach(var a, b in table)
	{
		system.print(a ..":"..b .. "\n");
		//sleep(200);
	}
	system.print("\nTable Size : " ..tosize(table).."\n\n");
}

fun fun_Sort()
{
	//var table = { "cc"={"aa" = "bb",100,101,102}, 1, 2, 3, 4, 5, "test", 65 };
	//var table = { 10, 11, 100=12,"test", 13 };
	var tableNumber = { 5, 3, 1, 4, 7, 2 };

	system.print("Before    : " .. dumpTable(tableNumber) .. "\n");
	system.sort(tableNumber, fun(var a, var b) { return a < b; });
	system.print("Ascending : " .. dumpTable(tableNumber) .. "\n");
	
	var tablePeople = {
		{"nationality" = "Ameraca", "name" = "James"},
		{"nationality" = "Korea",   "name" = "Alice"},
		{"nationality" = "Japan",   "name" = "Donard"},
	};

	system.print("Before : " .. dumpTable(tablePeople) .. "\n");

	system.sort(tablePeople, fun(var a, var b){return a.name < b.name;});
	system.print("Name   : " .. dumpTable(tablePeople) .. "\n");

	system.sort(tablePeople, fun(var a, var b){return a["nationality"] < b["nationality"];});
	system.print("Nation : " .. dumpTable(tablePeople) .. "\n");
}

fun Fun_Performanc()
{
	var table = {};
	var tm = system.clock();
	//for (var i = 1; i <= 10000000; i++) // release
	for (var i = 1; i <= 100000; i++) // debug
	{
		table[i] = i;
	}
	var sum = 0.0;
	system.print("\nTable Size : " ..tosize(table));
	system.print("\nInsert Time : " .. (system.clock() - tm)  .. "\n\n");

	tm = system.clock();
	system.sort(table, fun(var a, var b) { return a > b; });
	system.print("\nSort  Time : " .. (system.clock() - tm) .. "\n\n");
	//system.print("Sorted   : " .. dumpTable(table) .. "\n");

	tm = system.clock();
	foreach(var a, b in table)
	{
		sum += b;
	}
	system.print("\nTable Size : " ..tosize(table).." Sum " .. sum .. "");
	system.print("\nLoop  Time : " .. (system.clock() - tm) .. "\n\n");
}

export fun main()
{
	Fun_General();
	fun_Sort();
	Fun_Performanc();
}
